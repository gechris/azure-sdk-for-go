package postgresql

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// CustomerMaintenanceWindowClient is the the Microsoft Azure management API provides create, read, update, and delete
// functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security
// alert policies, log files and configurations with new business model.
type CustomerMaintenanceWindowClient struct {
    BaseClient
}
// NewCustomerMaintenanceWindowClient creates an instance of the CustomerMaintenanceWindowClient client.
func NewCustomerMaintenanceWindowClient(subscriptionID string) CustomerMaintenanceWindowClient {
    return NewCustomerMaintenanceWindowClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewCustomerMaintenanceWindowClientWithBaseURI creates an instance of the CustomerMaintenanceWindowClient client
// using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign
// clouds, Azure stack).
    func NewCustomerMaintenanceWindowClientWithBaseURI(baseURI string, subscriptionID string) CustomerMaintenanceWindowClient {
        return CustomerMaintenanceWindowClient{ NewWithBaseURI(baseURI, subscriptionID)}
    }

// CreateOrUpdate creates a new customer maintenance window.
    // Parameters:
        // resourceGroupName - the name of the resource group. The name is case insensitive.
        // serverName - the name of the server.
        // maintenanceWindowName - the name of the maintenance window.
        // parameters - the required parameters for creating or updating a customer maintenance window.
func (client CustomerMaintenanceWindowClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, serverName string, maintenanceWindowName string, parameters CustomerMaintenanceWindow) (result CustomerMaintenanceWindowCreateOrUpdateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/CustomerMaintenanceWindowClient.CreateOrUpdate")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: client.SubscriptionID,
         Constraints: []validation.Constraint{	{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil }}},
        { TargetValue: resourceGroupName,
         Constraints: []validation.Constraint{	{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil }}},
        { TargetValue: parameters,
         Constraints: []validation.Constraint{	{Target: "parameters.CustomerMaintenanceWindowProperties", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "parameters.CustomerMaintenanceWindowProperties.DayOfWeek", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "parameters.CustomerMaintenanceWindowProperties.StartHour", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "parameters.CustomerMaintenanceWindowProperties.StartMinute", Name: validation.Null, Rule: true, Chain: nil },
        }}}}}); err != nil {
        return result, validation.NewError("postgresql.CustomerMaintenanceWindowClient", "CreateOrUpdate", err.Error())
        }

        req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, serverName, maintenanceWindowName, parameters)
    if err != nil {
    err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "CreateOrUpdate", nil , "Failure preparing request")
    return
    }

        result, err = client.CreateOrUpdateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "CreateOrUpdate", result.Response(), "Failure sending request")
        return
        }

    return
}

    // CreateOrUpdatePreparer prepares the CreateOrUpdate request.
    func (client CustomerMaintenanceWindowClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, serverName string, maintenanceWindowName string, parameters CustomerMaintenanceWindow) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "maintenanceWindowName": autorest.Encode("path",maintenanceWindowName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "serverName": autorest.Encode("path",serverName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-02-14-privatepreview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/flexibleServers/{serverName}/maintenanceWindows/{maintenanceWindowName}",pathParameters),
autorest.WithJSON(parameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
    // http.Response Body if it receives an error.
    func (client CustomerMaintenanceWindowClient) CreateOrUpdateSender(req *http.Request) (future CustomerMaintenanceWindowCreateOrUpdateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
    // closes the http.Response Body.
    func (client CustomerMaintenanceWindowClient) CreateOrUpdateResponder(resp *http.Response) (result CustomerMaintenanceWindow, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete deletes a PostgreSQL server Customer maintenance window.
    // Parameters:
        // resourceGroupName - the name of the resource group. The name is case insensitive.
        // serverName - the name of the server.
        // maintenanceWindowName - the name of the maintenance window.
func (client CustomerMaintenanceWindowClient) Delete(ctx context.Context, resourceGroupName string, serverName string, maintenanceWindowName string) (result CustomerMaintenanceWindowDeleteFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/CustomerMaintenanceWindowClient.Delete")
        defer func() {
            sc := -1
        if result.Response() != nil {
        sc = result.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: client.SubscriptionID,
         Constraints: []validation.Constraint{	{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil }}},
        { TargetValue: resourceGroupName,
         Constraints: []validation.Constraint{	{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil }}}}); err != nil {
        return result, validation.NewError("postgresql.CustomerMaintenanceWindowClient", "Delete", err.Error())
        }

        req, err := client.DeletePreparer(ctx, resourceGroupName, serverName, maintenanceWindowName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "Delete", nil , "Failure preparing request")
    return
    }

        result, err = client.DeleteSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "Delete", result.Response(), "Failure sending request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client CustomerMaintenanceWindowClient) DeletePreparer(ctx context.Context, resourceGroupName string, serverName string, maintenanceWindowName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "maintenanceWindowName": autorest.Encode("path",maintenanceWindowName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "serverName": autorest.Encode("path",serverName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-02-14-privatepreview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/flexibleServers/{serverName}/maintenanceWindows/{maintenanceWindowName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client CustomerMaintenanceWindowClient) DeleteSender(req *http.Request) (future CustomerMaintenanceWindowDeleteFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
            if err != nil {
            return
            }
            future.Future, err = azure.NewFutureFromResponse(resp)
            return
            }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client CustomerMaintenanceWindowClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Get get the Customer maintenance windows of a given PostgreSQL server.
    // Parameters:
        // resourceGroupName - the name of the resource group. The name is case insensitive.
        // serverName - the name of the server.
        // maintenanceWindowName - the name of the maintenance window.
func (client CustomerMaintenanceWindowClient) Get(ctx context.Context, resourceGroupName string, serverName string, maintenanceWindowName string) (result CustomerMaintenanceWindow, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/CustomerMaintenanceWindowClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: client.SubscriptionID,
         Constraints: []validation.Constraint{	{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil }}},
        { TargetValue: resourceGroupName,
         Constraints: []validation.Constraint{	{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil }}}}); err != nil {
        return result, validation.NewError("postgresql.CustomerMaintenanceWindowClient", "Get", err.Error())
        }

        req, err := client.GetPreparer(ctx, resourceGroupName, serverName, maintenanceWindowName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "Get", resp, "Failure responding to request")
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client CustomerMaintenanceWindowClient) GetPreparer(ctx context.Context, resourceGroupName string, serverName string, maintenanceWindowName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "maintenanceWindowName": autorest.Encode("path",maintenanceWindowName),
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "serverName": autorest.Encode("path",serverName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-02-14-privatepreview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/flexibleServers/{serverName}/maintenanceWindows/{maintenanceWindowName}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client CustomerMaintenanceWindowClient) GetSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client CustomerMaintenanceWindowClient) GetResponder(resp *http.Response) (result CustomerMaintenanceWindow, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListByServer list all the Customer Maintenance Windows in a given PostgreSQL flexible server.
    // Parameters:
        // resourceGroupName - the name of the resource group. The name is case insensitive.
        // serverName - the name of the server.
func (client CustomerMaintenanceWindowClient) ListByServer(ctx context.Context, resourceGroupName string, serverName string) (result CustomerMaintenanceWindowListResult, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/CustomerMaintenanceWindowClient.ListByServer")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: client.SubscriptionID,
         Constraints: []validation.Constraint{	{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil }}},
        { TargetValue: resourceGroupName,
         Constraints: []validation.Constraint{	{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil },
        	{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil }}}}); err != nil {
        return result, validation.NewError("postgresql.CustomerMaintenanceWindowClient", "ListByServer", err.Error())
        }

        req, err := client.ListByServerPreparer(ctx, resourceGroupName, serverName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "ListByServer", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListByServerSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "ListByServer", resp, "Failure sending request")
        return
        }

        result, err = client.ListByServerResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "postgresql.CustomerMaintenanceWindowClient", "ListByServer", resp, "Failure responding to request")
        }

    return
}

    // ListByServerPreparer prepares the ListByServer request.
    func (client CustomerMaintenanceWindowClient) ListByServerPreparer(ctx context.Context, resourceGroupName string, serverName string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "resourceGroupName": autorest.Encode("path",resourceGroupName),
        "serverName": autorest.Encode("path",serverName),
        "subscriptionId": autorest.Encode("path",client.SubscriptionID),
        }

            const APIVersion = "2020-02-14-privatepreview"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/flexibleServers/{serverName}/maintenanceWindows",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListByServerSender sends the ListByServer request. The method will close the
    // http.Response Body if it receives an error.
    func (client CustomerMaintenanceWindowClient) ListByServerSender(req *http.Request) (*http.Response, error) {
            return client.Send(req, azure.DoRetryWithRegistration(client.Client))
            }

    // ListByServerResponder handles the response to the ListByServer request. The method always
    // closes the http.Response Body.
    func (client CustomerMaintenanceWindowClient) ListByServerResponder(resp *http.Response) (result CustomerMaintenanceWindowListResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

